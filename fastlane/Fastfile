# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.28.3"

default_platform :ios

APP_ID = "com.rcaroff.List"
WATCH_APP_ID = "com.rcaroff.List.watchkitapp"
WATCH_APP_EXTENSION_ID = "com.rcaroff.List.watchkitapp.watchkitextension"
APP_IDENTIFIER = [APP_ID, WATCH_APP_ID, WATCH_APP_EXTENSION_ID]    

platform :ios do
  before_all do
    ENV["SLACK_URL"]        = "https://hooks.slack.com/services/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"
    ENV["MAIN_PATH"]        = "/Users/caroffremi/Projects/list"
    ENV["PROJECT_NAME"]     = "List"
    ENV["APP_SCHEME"]       = "List"
    ENV["APP_TARGET"]       = "List"
    ENV["WATCH_TARGET"]     = "WatchList"
    ENV["WATCH_EXT_TARGET"] = "WatchList Extension"
    ENV["APP_ID"]           = "com.rcaroff.List"
  end

  desc "Generate provisioning profiles and certificates, pushes on certs repo and install them"
  lane :generate_signing_development do
    match(app_identifier: APP_IDENTIFIER, type: "development")
  end

  lane :generate_signing_adhoc do
    match(app_identifier: APP_IDENTIFIER, type: "adhoc")
  end

  lane :generate_signing_appstore do
    match(app_identifier: APP_IDENTIFIER, type: "appstore")
  end

  lane :generate_signing_all do
    generate_signing_development
    generate_signing_adhoc
    generate_signing_appstore
  end

  desc "Will generate appicons for app & watch from a 1024*1024px appicon.png file in project's fastlane folder. Warning : it will replace all icons files in AppIcon iconset."
  lane :generate_appicon do
    sh("rm #{ENV["MAIN_PATH"]}/List/Assets.xcassets/AppIcon.appiconset/*")
    sh("rm #{ENV["MAIN_PATH"]}/WatchList/Assets.xcassets/AppIcon.appiconset/*")
    appicon(
      appicon_image_file: "#{ENV["MAIN_PATH"]}/fastlane/appicon.png",
      appicon_devices: [:ipad, :iphone, :ios_marketing, :watch, :watch_marketing],
      appicon_path: "#{ENV["MAIN_PATH"]}/List/Assets.xcassets"
    )

    appicon(
      appicon_image_file: "#{ENV["MAIN_PATH"]}/fastlane/appicon.png",
      appicon_devices: [:watch, :watch_marketing],
      appicon_path: "#{ENV["MAIN_PATH"]}/WatchList/Assets.xcassets"
    )
  end

  desc "Set the version number with the one specified with parameter 'version'. Example : fastlane set_version_number version:1.6.3"
  lane :set_version_number do |options|
    increment_version_number_in_plist(
      version_number: "#{options[:version]}", # Set a specific version number
      target: "#{ENV["APP_TARGET"]}"
    )

    increment_version_number_in_plist(
      version_number: "#{options[:version]}", # Set a specific version number
      target: "#{ENV["WATCH_TARGET"]}"
    )

    increment_version_number_in_plist(
      version_number: "#{options[:version]}", # Set a specific version number
      target: "#{ENV["WATCH_EXT_TARGET"]}"
    )

  end

  desc "Set the build number with the one specified with parameter 'build'. Example : fastlane set_build_number build:1"
  lane :set_build_number do |options|
    increment_build_number_in_plist(
      build_number: "#{options[:build]}", # Set a specific build number
      target: "#{ENV["APP_TARGET"]}"
    )

    increment_build_number_in_plist(
      build_number: "#{options[:build]}", # Set a specific build number
      target: "#{ENV["WATCH_TARGET"]}"
    )

    increment_build_number_in_plist(
      build_number: "#{options[:build]}", # Set a specific build number
      target: "#{ENV["WATCH_EXT_TARGET"]}"
    )

  end

  lane :bump_version do |options|
    increment_version_number_in_plist(
      bump_type: options[:bump_type], # Automatically increment minor version number
      target: ENV["APP_TARGET"]
    )
    increment_version_number_in_plist(
      bump_type: options[:bump_type], # Automatically increment minor version number
      target: ENV["WATCH_TARGET"]
    )
    increment_version_number_in_plist(
      bump_type: options[:bump_type], # Automatically increment minor version number
      target: ENV["WATCH_EXT_TARGET"]
    )
    set_build_number(build: 0)
    commit_version_bump
  end

  private_lane :update_icon_banner do
    icon_banner_restore()
    icon_banner(label: get_version_string)
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do

    cocoapods
    #match(type: "appstore") # more information: https://codesigning.guide

    increment_build_number_in_plist

    update_icon_banner
    git_add(path: "#{ENV["MAIN_PATH"]}/.")
    git_commit(path: "#{ENV["MAIN_PATH"]}/.", message: "Updated appicon badge")
    
    push_to_git_remote

    gym(
      export_method: "app-store",
      export_options: {
          provisioningProfiles: {
              ENV["APP_ID"] => "match AppStore #{ENV["APP_ID"]}",
          }
      },
    scheme: ENV["APP_SCHEME"])
  
    # pilot will updload build to testflight
    pilot

    icon_banner_restore()

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym(scheme: "List") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  desc "Runs all the tests"
  lane :test do
    scan
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    slack(
      message: "‚úÖ Successfully deployed new App Update. üöÄ ‚û°Ô∏è #{get_version_string}",
      success: true
    )
  end

  error do |lane, exception|
    slack(
      message: "‚ùå #{exception.message} üñï",
      success: false
    )
  end
end

def get_version_string
  version_number = get_version_number_from_plist(
    xcodeproj: "#{ENV["MAIN_PATH"]}/#{ENV["PROJECT_NAME"]}.xcodeproj",
    target: "#{ENV["APP_TARGET"]}",
    build_configuration_name: 'Release'
  )
  build_number = get_build_number_from_plist(
    xcodeproj: "#{ENV["MAIN_PATH"]}/#{ENV["PROJECT_NAME"]}.xcodeproj",
    target: "#{ENV["APP_TARGET"]}",
    build_configuration_name: 'Release'
  )

  return "v.#{version_number} (#{build_number})"
end
# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
